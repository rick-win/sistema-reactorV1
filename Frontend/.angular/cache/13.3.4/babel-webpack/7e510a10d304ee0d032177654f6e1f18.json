{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst helper = new JwtHelperService();\nexport let AuthApiService = /*#__PURE__*/(() => {\n  class AuthApiService {\n    constructor(http) {\n      this.http = http;\n      this.loggedIn = new BehaviorSubject(false);\n      this.redirectUrl = null;\n      this.checkToken();\n    }\n\n    get isLogged() {\n      return this.loggedIn.asObservable();\n    }\n\n    giveLoggedUser() {\n      return this.userInfo;\n    }\n\n    login(authCred) {\n      return this.http.post(`${environment.API_URL}/auth/login`, authCred).pipe(map(res => {\n        console.log(res);\n        this.userInfo = {\n          id_Usuario: res.userID,\n          rol_Usuario: res.role,\n          email_Usuario: res.username,\n          nom_Usuario: res.name,\n          ape_Usuario: res.last,\n          tel_Usuario: res.phone\n        };\n        this.saveUserInfo(this.userInfo); //saveToken\n\n        this.saveToken(res.token);\n        this.loggedIn.next(true);\n        return res;\n      }), catchError(err => this.errorHandler(err)));\n    }\n\n    logout() {\n      localStorage.clear();\n      this.loggedIn.next(false);\n    }\n\n    checkToken() {\n      const userToken = localStorage.getItem('Token');\n      const isExpired = helper.isTokenExpired(userToken);\n      isExpired ? this.logout() : this.loggedIn.next(true);\n      console.log('Is Expired = ', isExpired);\n    }\n\n    saveUserInfo(data) {\n      localStorage.setItem('Username', data.email_Usuario);\n      localStorage.setItem('Name', data.nom_Usuario);\n    }\n\n    saveToken(token) {\n      localStorage.setItem('Token', token);\n    }\n\n    errorHandler(err) {\n      let errorMessage = 'error data';\n\n      if (err) {\n        errorMessage = `Error: Code ${err.message}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthApiService.ɵfac = function AuthApiService_Factory(t) {\n    return new (t || AuthApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthApiService,\n    factory: AuthApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}